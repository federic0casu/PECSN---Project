[General]
network                   = OpportunisticCellularNetwork
sim-time-limit            = 10s
**.antenna.timeslot       = 1 ms
**.antenna.queueDimension = 0  # means queue of infinite dimension

# +-------------------------------------------------------------------------------+
#  Test 1: 1 user, fixed CQI = 7, deterministic arrivals, queue of infite dimension
#**.population             = 1
#**.stage                  = 0
#**.cellular[*].TEST	   = 1
#**.cellular[*].TEST_CQI   = 7
#**.source[*].TEST	       = 1
#**.source[*].TEST_PERIOD  = 0.20 ms
#**.source[*].TEST_SIZE    = 50
#  Pseudo Random Generators
#num-rngs = 1   			
#**.antenna.rng-0          = 0
# +-------------------------------------------------------------------------------+

# +-------------------------------------------------------------------------------+
#  Degeneracy Test 1: 1 user, fixed CQI = 15, deterministic arrivals, 
#                   queue of infite dimension
#**.population             = 1
#**.stage                  = 0
#**.cellular[*].TEST	   = 2
#**.cellular[*].TEST_CQI   = 15
#**.source[*].TEST	       = 2
#**.source[*].TEST_PERIOD  = ${0.20, 0.10, 0.05, 0.02, 0.01} ms
#**.source[*].TEST_SIZE    = 93
# Pseudo Random Generators
#num-rngs = 1   			
#**.antenna.rng-0          = 0
# +-------------------------------------------------------------------------------+

# +-------------------------------------------------------------------------------+
#  Degeneracy Test 2: 1 user, fixed CQI = 15, exponential arrivals, 
#                   queue of infite dimension
#**.population             = 1
#**.stage                  = 0
#**.cellular[*].TEST	   = 5
#**.cellular[*].TEST_CQI   = 15
#**.source[*].TEST	       = 5
#**.source[*].RATE         = ${5, 10, 20}
#**.source[*].TEST_SIZE    = 93
# Pseudo Random Generators
#repeat                    = 30
#seed-set				   = ${repetition}
#num-rngs                  = 3   			
#**.antenna.rng-0          = 0
#**.source.rng-0           = 1
#**.source.rng-1           = 2
# +-------------------------------------------------------------------------------+

# +-------------------------------------------------------------------------------+
# Consistency Test (first configuration): 1 user, fixed CQI = 10, 
#                  deterministic arrivals, queue of infite dimension, 
#                  fixed packet dimension = 25
#[consistencyTest0]
#**.population           = 1
#**.stage                = 0
#**.cellular[*].TEST     = 3
#**.cellular[*].TEST_CQI = 10
#**.source[*].TEST       = 3
#**.source[*].TEST_RATE  = 4
#**.source[*].TEST_SIZE  = 25
# Pseudo Random Generators
#num-rngs = 1   			
#**.antenna.rng-0        = 0
# +-------------------------------------------------------------------------------+

# +-------------------------------------------------------------------------------+
# Consistency Test (second configuration): 1 user, fixed CQI = 10, 
#                  deterministic arrivals, queue of infite dimension, 
#                  fixed packet dimension = 25
#[consistencyTest1]
#**.population = 2
#**.stage                = 0
#**.cellular[*].TEST     = 3
#**.cellular[*].TEST_CQI = 10
#**.source[*].TEST       = 3
#**.source[*].TEST_RATE  = 2
#**.source[*].TEST_SIZE  = 25
# Pseudo Random Generators
#num-rngs = 1   			
#**.antenna.rng-0        = 0
# +-------------------------------------------------------------------------------+

# +-------------------------------------------------------------------------------+
# Scheduling Test
#[schedulingValidation]
#**.population          = 3
#**.stage               = 0
# fixed rate, service demand
#**.source[*].TEST      = 4
#**.source[*].TEST_SIZE = 25
#**.source[*].TEST_RATE = 2
#fixed CQIs
#**.cellular[*].TEST    = 4
#*.cellular[0].TEST_CQI = 5
#*.cellular[1].TEST_CQI = 10
#*.cellular[2].TEST_CQI = 15
# +-------------------------------------------------------------------------------+

# +-------------------------------------------------------------------------------+
#  Scenario: queues of infinite dimension, Exponential arrivals, Uniform pack. size,
#            Uniform CQIs
#**.population             = 10
#**.antenna.stage          = 0
#**.source[*].stage        = 0
#warmup-period             = 2 s
#repeat                    = 30
#seed-set		         = ${repetition}
# +-------------------------------------------------------------------------------+
# Cellular config
#**.cellular[*].typeCQI   = false #uniform = false, binomial = true
#**.cellular[*].uniform_r = 15    #range for uniform CQI
# +-------------------------------------------------------------------------------+
# Source config
#**.source[*].RATE = ${1,2,3,4,5,6,7,8,9,10} 
# +-------------------------------------------------------------------------------+
#  To run a batch of simulations with this scenario it is mandatory to uncomment
#  the first set of RNGs.
# +-------------------------------------------------------------------------------+

# +-------------------------------------------------------------------------------+
#  Scenario: queues of infinite dimension, Exponential arrivals, Uniform pack. size,
#            Binomial CQIs - Throughput analisys
#**.population             = 10
#**.antenna.stage          = 0
#**.source[*].stage        = 0
#warmup-period             = 2 s
#repeat                    = 30
#seed-set				   = ${repetition}
# +-------------------------------------------------------------------------------+
# Cellular config
#**.cellular[*].typeCQI   = true #uniform = false, binomial = true
#**.cellular[*].binomial_n = 14
#**.cellular[0].binomial_p = 0.1
#**.cellular[1].binomial_p = 0.2
#**.cellular[2].binomial_p = 0.3
#**.cellular[3].binomial_p = 0.4
#**.cellular[4].binomial_p = 0.5
#**.cellular[5].binomial_p = 0.6
#**.cellular[6].binomial_p = 0.7
#**.cellular[7].binomial_p = 0.8
#**.cellular[8].binomial_p = 0.9  
#**.cellular[9].binomial_p = 0.95
# +-------------------------------------------------------------------------------+
# Source config
#**.source[*].RATE = ${1,2,3,4,5,6,7,8,9,10,11,12,13,14,15}
# +-------------------------------------------------------------------------------+
#  To run a batch of simulations with this scenario it is mandatory to uncomment
#  the first set of RNGs.
# +-------------------------------------------------------------------------------+

# +-------------------------------------------------------------------------------+
#  Scenario: queues of infinite dimension, Exponential arrivals, Uniform pack. size,
#            Binomial CQIs - Response time analisys
#**.population             = 10
#**.antenna.stage          = 0
#**.source[*].stage        = 0
#warmup-period             = 2 s
#repeat                    = 30
#seed-set			   = ${repetition}
# +-------------------------------------------------------------------------------+
# Cellular config
#**.cellular[*].typeCQI   = true #uniform = false, binomial = true
#**.cellular[*].binomial_n = 14
#**.cellular[0].binomial_p = 0.1
#**.cellular[1].binomial_p = 0.2
#**.cellular[2].binomial_p = 0.3
#**.cellular[3].binomial_p = 0.4
#**.cellular[4].binomial_p = 0.5
#**.cellular[5].binomial_p = 0.6
#**.cellular[6].binomial_p = 0.7
#**.cellular[7].binomial_p = 0.8
#**.cellular[8].binomial_p = 0.9  
#**.cellular[9].binomial_p = 0.95
# +-------------------------------------------------------------------------------+
#**.cellular[*].packets    = 3000	# We set 3000 to be sure that, after the 
#                                   # warm-up time, we will obtain at least 2000 samples
#**.cellular[0].stop       = true
# +-------------------------------------------------------------------------------+
# Source config
#**.source[*].RATE = ${0.125,0.5,1,1.5,2}
# +-------------------------------------------------------------------------------+
#  To run a batch of simulations with this scenario it is mandatory to uncomment
#  the first set of RNGs.
# +-------------------------------------------------------------------------------+

# +-------------------------------------------------------------------------------+
#  Scenario: queues of infinite dimension, Exponential arrivals, Uniform pack. size,
#            Binomial CQIs - Response time analisys with high/low class
#**.population             = 10
#**.antenna.stage          = 0
#**.source[*].stage        = 0
#warmup-period             = 2 s
#repeat                    = 30
#seed-set			   = ${repetition}
# +-------------------------------------------------------------------------------+
# Cellular config
#**.cellular[*].typeCQI   = true #uniform = false, binomial = true
#**.cellular[*].binomial_n = 14
#**.cellular[0].binomial_p = 0.1
#**.cellular[1].binomial_p = 0.2
#**.cellular[2].binomial_p = 0.3
#**.cellular[3].binomial_p = 0.4
#**.cellular[4].binomial_p = 0.5
#**.cellular[5].binomial_p = 0.6
#**.cellular[6].binomial_p = 0.7
#**.cellular[7].binomial_p = 0.8
#**.cellular[8].binomial_p = 0.9  
#**.cellular[9].binomial_p = 0.95
# +-------------------------------------------------------------------------------+
# Source config
#**.source[*].RATE = ${0.1,0.3,0.5,0.7,0.9,1,1.1,1.2,1.3}
# +-------------------------------------------------------------------------------+
#  To run a batch of simulations with this scenario it is mandatory to uncomment
#  the first set of RNGs.
# +-------------------------------------------------------------------------------+

# +-------------------------------------------------------------------------------+
#  Scenario: queues of infinite dimension, population divided in high class and low class.
#		     RB allocation analysis
#**.population             = 20
#**.antenna.stage          = 0
#**.source[*].stage        = 0
#warmup-period             = 2 s
#repeat                    = 30
#seed-set				  = ${repetition}
# +-------------------------------------------------------------------------------+
# Cellular config
#**.cellular[*].typeCQI    = true # uniform = false, binomial = true
#**.cellular[*].binomial_n = 14
#**.cellular[0].binomial_p = 0.4
#**.cellular[1].binomial_p = 0.4
#**.cellular[2].binomial_p = 0.4
#**.cellular[3].binomial_p = 0.4
#**.cellular[4].binomial_p = 0.4
#**.cellular[5].binomial_p = 0.4
#**.cellular[6].binomial_p = 0.4
#**.cellular[7].binomial_p = 0.4
#**.cellular[8].binomial_p = 0.4  
#**.cellular[9].binomial_p = 0.4
#**.cellular[10].binomial_p = 0.8
#**.cellular[11].binomial_p = 0.8
#**.cellular[12].binomial_p = 0.8
#**.cellular[13].binomial_p = 0.8
#**.cellular[14].binomial_p = 0.8
#**.cellular[15].binomial_p = 0.8
#**.cellular[16].binomial_p = 0.8
#**.cellular[17].binomial_p = 0.8
#**.cellular[18].binomial_p = 0.8  
#**.cellular[19].binomial_p = 0.8
# +-------------------------------------------------------------------------------+
# Source config
#**.source[*].RATE = ${0.1,0.4,0.7,1,1.3,1.6,1.9,2.1,2.4}
# +-------------------------------------------------------------------------------+
#  To run a batch of simulations with this scenario it is mandatory to uncomment
#  the second set of RNGs.
# +-------------------------------------------------------------------------------+


# +------------------------------------------------------------------------------------------------------------------------------------------+

# +-------------------------------------------------------------------------------+
# Pseudo Random Generators - FIRST set
#num-rngs = 31 
#**.antenna.rng-0     = 0   			
#**.cellular[0].rng-0 = 1
#**.cellular[1].rng-0 = 2
#**.cellular[2].rng-0 = 3
#**.cellular[3].rng-0 = 4
#**.cellular[4].rng-0 = 5
#**.cellular[5].rng-0 = 6
#**.cellular[6].rng-0 = 7
#**.cellular[7].rng-0 = 8
#**.cellular[8].rng-0 = 9
#**.cellular[9].rng-0 = 10
#**.source[0].rng-0   = 11
#** source[0].rng-1   = 12
#**.source[1].rng-0   = 13
#** source[1].rng-1   = 14
#**.source[2].rng-0   = 15
#** source[2].rng-1   = 16
#**.source[3].rng-0   = 17
#** source[3].rng-1   = 18
#**.source[4].rng-0   = 19
#** source[4].rng-1   = 20
#**.source[5].rng-0   = 21
#** source[5].rng-1   = 22
#**.source[6].rng-0   = 23
#** source[6].rng-1   = 24
#**.source[7].rng-0   = 25
#** source[7].rng-1   = 26
#**.source[8].rng-0   = 27
#** source[8].rng-1   = 28
#**.source[9].rng-0   = 29
#** source[9].rng-1   = 30
# +-------------------------------------------------------------------------------+

# +-------------------------------------------------------------------------------+
# Pseudo Random Generators - SECOND set
num-rngs = 61 
**.antenna.rng-0      = 0   			
**.cellular[0].rng-0  = 1
**.cellular[1].rng-0  = 2
**.cellular[2].rng-0  = 3
**.cellular[3].rng-0  = 4
**.cellular[4].rng-0  = 5
**.cellular[5].rng-0  = 6
**.cellular[6].rng-0  = 7
**.cellular[7].rng-0  = 8
**.cellular[8].rng-0  = 9
**.cellular[9].rng-0  = 10
**.source[0].rng-0    = 11
** source[0].rng-1    = 12
**.source[1].rng-0    = 13
** source[1].rng-1    = 14
**.source[2].rng-0    = 15
** source[2].rng-1    = 16
**.source[3].rng-0    = 17
** source[3].rng-1    = 18
**.source[4].rng-0    = 19
** source[4].rng-1    = 20
**.source[5].rng-0    = 21
** source[5].rng-1    = 22
**.source[6].rng-0    = 23
** source[6].rng-1    = 24
**.source[7].rng-0    = 25
** source[7].rng-1    = 26
**.source[8].rng-0    = 27
** source[8].rng-1    = 28
**.source[9].rng-0    = 29
** source[9].rng-1    = 30
**.cellular[10].rng-0 = 31
**.cellular[11].rng-0 = 32
**.cellular[12].rng-0 = 33
**.cellular[13].rng-0 = 34
**.cellular[14].rng-0 = 35
**.cellular[15].rng-0 = 36
**.cellular[16].rng-0 = 37
**.cellular[17].rng-0 = 38
**.cellular[18].rng-0 = 39
**.cellular[19].rng-0 = 40
**.source[10].rng-0   = 41
** source[10].rng-1   = 42
**.source[11].rng-0   = 43
** source[11].rng-1   = 44
**.source[12].rng-0   = 45
** source[12].rng-1   = 46
**.source[13].rng-0   = 47
** source[13].rng-1   = 48
**.source[14].rng-0   = 49
** source[14].rng-1   = 50
**.source[15].rng-0   = 51
** source[15].rng-1   = 52
**.source[16].rng-0   = 53
** source[16].rng-1   = 54
**.source[17].rng-0   = 55
** source[17].rng-1   = 56
**.source[18].rng-0   = 57
** source[18].rng-1   = 58
**.source[19].rng-0   = 59
** source[19].rng-1   = 60
# +-------------------------------------------------------------------------------+